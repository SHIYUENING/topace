//Vertex Shader
struct vertex
{
float4 position	:	POSITION;
float3 normal	:	NORMAL;
float4 color0	:	COLOR0;
float2 texcoord0	:	TEXCOORD0;
//float depin	:	DEPTH;
};

struct fragment
{
float4 position	:	POSITION;
float3 oNormal	:	TEXCOORD1;
float4 color0	:	COLOR0;
float2 texcoord0	:	TEXCOORD0;
float3 objectPos	:	TEXCOORD2;
float2 texcoord3	:	TEXCOORD3;
float4 objectPos2	:	TEXCOORD4;
//float4 objectPos3	:	TEXCOORD5;
//float depout	:	DEPTH;
};

// This binding semantic requires CG_PROFILE_ARBVP1 or higher.
uniform float4x4 modelViewProj : state.matrix.mvp;

fragment main( 
			uniform float	testnum,
			  vertex IN,
			  uniform float4x4 ShadowMapmvmatrix,
			  uniform float4x4 ShadowMapprojmatrix 
			  )
{
	fragment OUT;
	float4x4 modelViewProj2=mul(ShadowMapprojmatrix,ShadowMapmvmatrix);
	float4 objectPosShadowMap=mul( modelViewProj2, IN.position );
	//OUT.texcoord3.x=objectPosShadowMap.x*(0.39+testnum*0.1)/(objectPosShadowMap.z*2)+0.5;
	//OUT.texcoord3.y=objectPosShadowMap.y*(0.39+testnum*0.1)/(objectPosShadowMap.z*2)+0.5;
	OUT.texcoord3.x=objectPosShadowMap.x/(objectPosShadowMap.w*2)+0.5;
	OUT.texcoord3.y=objectPosShadowMap.y/(objectPosShadowMap.w*2)+0.5;
	OUT.objectPos2 = objectPosShadowMap;

	
	OUT.position = mul( modelViewProj, IN.position );
	OUT.color0 = IN.color0;
	OUT.texcoord0 = IN.texcoord0;
	OUT.oNormal = IN.normal;
	OUT.objectPos = IN.position.xyz;
	
	/*
	OUT.objectPos3.x=objectPosShadowMap.x/(objectPosShadowMap.w*2)+0.5;
	OUT.objectPos3.y=objectPosShadowMap.y/(objectPosShadowMap.w*2)+0.5;
	OUT.objectPos3.z=objectPosShadowMap.z/(objectPosShadowMap.w*2)+0.5;
	OUT.objectPos3.w=1.0;
	*/
//	OUT.depout=IN.depin;


	return OUT;
}