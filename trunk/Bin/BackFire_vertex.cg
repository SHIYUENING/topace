//Vertex Shader
struct vertex
{
float4 position	:	POSITION;
float3 normal	:	NORMAL;
};

struct fragment
{
float4 position	:	POSITION;
float4 color0	:	COLOR0;
};

// This binding semantic requires CG_PROFILE_ARBVP1 or higher.
uniform float4x4 modelViewProj : state.matrix.mvp;
fragment main(
			  vertex IN,
			  uniform float4 BackFireEyeDir,
			  uniform float4 BackFireColor,
			  uniform float EnginePower
			  )
{
	fragment OUT;
	OUT.position=mul( modelViewProj, IN.position );
	float BackPosZ=1.0-min((IN.position.z-20.0)/(55.0*EnginePower),1.0);
	float outColorA=1.0-abs(dot(normalize(IN.normal),BackFireEyeDir.xyz));
    OUT.color0 = float4(BackFireColor.xyz,BackFireColor.z*BackPosZ*(1.0+BackFireEyeDir.a*0.5))*outColorA;
    return OUT;
}
