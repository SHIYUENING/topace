
uniform sampler2D DiffuseTex;
uniform vec4 LightColor;
uniform vec4 LightPosEye;
varying  vec4 VertexEyeDir; 
varying  vec3 Normal; 
vec2 OmniLight(vec4 LightPosEyeIn)
{
	vec3 LightDir = normalize( LightPosEyeIn.xyz - VertexEyeDir.xyz );
	float NdotL = dot(Normal,LightDir);
	float specular = 0.0;
	//if(NdotL>0.0)
	{
		vec3 HightLight = normalize(LightDir - normalize(VertexEyeDir.xyz));
		specular = pow(max(dot(Normal, HightLight), 0.0), gl_FrontMaterial.shininess);
	}
	NdotL = max(0.0,NdotL);
	return vec2(NdotL,specular);
}
void main()
{

	vec4 DiffuseTexColor = texture2D(DiffuseTex, gl_TexCoord[0].xy);
	vec2 OmniLightVal;
	vec4 DiffuseColor;
	vec4 SpecularColor;
	OmniLightVal = OmniLight (LightPosEye);
	DiffuseColor = OmniLightVal.x * gl_FrontMaterial.diffuse * DiffuseTexColor;
	SpecularColor = OmniLightVal.y * gl_FrontMaterial.specular * DiffuseTexColor;
	gl_FragColor = DiffuseTexColor * ( DiffuseColor + gl_LightModel.ambient * gl_FrontMaterial.ambient + gl_FrontMaterial.emission +0.1) + SpecularColor;
	//gl_FragColor = DiffuseTexColor;
    return;
} 
