//Fragment Shader

// Note how the fragment struct was simply copied from our vertex shader code.
// This is necessary if we want to use a vertex and pixel shader together.

struct fragment
{
    float4 position	:	POSITION;
    float4 color0	:	COLOR0;
    float2 texcoord0	:	TEXCOORD0;
    float3 normal	:	TEXCOORD1;
    float3 objectPos	:	TEXCOORD2;
	float4 objectPos2	:	TEXCOORD3;
};

struct pixel
{
    float4 color : COLOR;
};

pixel main( 
    fragment IN, 
    uniform float3	globalAmbient,
    uniform float3	paraLightColor,
    uniform float3	paraLightDirection,
    uniform float3	eyePosition,
	uniform float3	FogColor,
	//uniform float	time,
    uniform sampler2D	testTexture,
	uniform samplerCUBE	AmbientReflectiveTexturSea
)
{

    float3 NN =tex2D( testTexture, IN.texcoord0*3)*0.5+tex2D( testTexture, IN.texcoord0*2)*0.5;
	float3 N;
	N.x=(NN.x-0.5)*2.0;
	N.y=(NN.z-0.5)*1.0;
	N.z=(NN.y-0.5)*2.0;
    float3 diffuse;
	diffuse.r=0.25;
	diffuse.g=0.5;
	diffuse.b=1.0;
	float fogb=min((10000-IN.objectPos.z)/7000,1.0);
    float4 Ocolor;
    Ocolor.w = 1.0;
    pixel OUT;
	float4 Ocolor2;
	Ocolor2.xyz=(1-fogb)*FogColor;
	Ocolor2.w=(1-fogb);
	float3 objpos;
	objpos.x=IN.objectPos2.x/IN.objectPos2.w;
	objpos.y=IN.objectPos2.y/IN.objectPos2.w;
	objpos.z=IN.objectPos2.z/IN.objectPos2.w;
	float3 V=normalize(eyePosition-objpos);
	V.y=-V.y;
	float Fresnel2=min(IN.objectPos.z,10000);
	Fresnel2=(10000-Fresnel2)/10000;
	float eDotN = dot(V, N);
	float3 vEyeReflected = reflect(V, N);
	float4 reflection = texCUBE(AmbientReflectiveTexturSea, vEyeReflected);
	float Fresnel = (1 - eDotN);
	Ocolor.xyz=Fresnel*reflection.xyz*0.3*Fresnel2+(1-fogb*0.9)*(1-Fresnel*0.7)*diffuse*globalAmbient+(1-fogb)*diffuse;
	OUT.color = Ocolor*fogb+Ocolor2;
    return OUT;
}
