#version 120
uniform ivec2 LightNums;
uniform sampler2D DiffuseTex;
varying vec4 VertexEyeDir; 
varying vec3 Normal; 
varying vec2 TexCoord0;
vec2 OmniLight(vec4 LightPosEyeIn)
{
	vec3 Nor=normalize(Normal);
	vec3 LightDir = normalize( LightPosEyeIn.xyz - VertexEyeDir.xyz );
	float NdotL = dot(Nor,LightDir);
	float specular = 0.0;

	vec3 HightLight =normalize( LightDir - normalize(VertexEyeDir.xyz));
	specular = pow(max(dot(Nor, HightLight), 0.0), gl_FrontMaterial.shininess);

	NdotL = max(0.0,NdotL);
	return vec2(NdotL,specular);
}
void main()
{
	vec4 DiffuseTexColor = texture2D(DiffuseTex, TexCoord0.xy);
	vec2 OmniLightVal=vec2(0.0,0.0);
	vec4 DiffuseColor=vec4(0.0,0.0,0.0,0.0);
	vec4 SpecularColor=vec4(0.0,0.0,0.0,0.0);
	OmniLightVal = OmniLight (gl_LightSource[0].position);
	DiffuseColor = OmniLightVal.x * gl_FrontLightProduct[0].diffuse ;
	SpecularColor = OmniLightVal.y * gl_FrontLightProduct[0].specular ;
	//gl_FragColor = DiffuseTexColor * (gl_FrontLightProduct[0].ambient + gl_FrontLightModelProduct.sceneColor + DiffuseColor) ;
	//gl_FragColor.w=DiffuseTexColor.w;
	//gl_FragColor=gl_FragColor+ SpecularColor;
	gl_FragColor = DiffuseTexColor * (gl_FrontLightProduct[0].ambient  + gl_FrontLightModelProduct.sceneColor + DiffuseColor)*gl_Color  +SpecularColor;
	gl_FragColor.w=DiffuseTexColor.w;
	//gl_FragColor.xyz=Normal;
	//gl_FragColor = DiffuseTexColor;
    return;
} 
