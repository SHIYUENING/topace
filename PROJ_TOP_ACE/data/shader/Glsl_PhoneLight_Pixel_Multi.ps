uniform ivec2 LightNums;
uniform sampler2D DiffuseTex;
varying  vec4 VertexEyeDir; 
varying  vec3 Normal; 
vec2 OmniLight(vec4 LightPosEyeIn)
{
	vec3 Nor=normalize(Normal);
	vec3 LightDir = normalize( LightPosEyeIn.xyz - VertexEyeDir.xyz );
	float NdotL = dot(Nor,LightDir);
	float specular = 0.0;

	vec3 HightLight =normalize( LightDir - normalize(VertexEyeDir.xyz));
	specular = pow(max(dot(Nor, HightLight), 0.0), gl_FrontMaterial.shininess*1.5);

	NdotL = max(0.0,NdotL);
	return vec2(NdotL,specular);
}
vec2 SpotLight(vec4 LightPosEyeIn,vec3 LightTGTPosEyeIn,float spotCosCutoff,float spotExponent)
{
	vec3 Nor=normalize(Normal);
	vec3 LightDir = normalize( LightPosEyeIn.xyz - VertexEyeDir.xyz );
	float NdotL = dot(Nor,LightDir);
	float specular = 0.0;
	float spotEffect = dot(normalize(LightTGTPosEyeIn),-LightDir);
	
	if(spotEffect > spotCosCutoff)
	{
		//spotEffect = pow((spotEffect-spotCosCutoff*2.0),spotExponent);
		//float spotCosFalloff = pow(spotCosCutoff,spotExponent);
		//spotEffect = (spotCosFalloff- spotEffect)/(spotCosFalloff-spotCosCutoff);
		spotEffect = pow(spotEffect,spotExponent);
		vec3 HightLight =normalize( LightDir - normalize(VertexEyeDir.xyz));
		specular = pow(max(dot(Nor, HightLight), 0.0), gl_FrontMaterial.shininess);

		NdotL = max(0.0,NdotL);
		NdotL = NdotL*spotEffect;
		specular = specular*spotEffect;
	}
	else
	{
		NdotL = 0.0;
	}
	return vec2(NdotL,specular);
}
void main()
{
	vec4 DiffuseTexColor = texture2D(DiffuseTex, gl_TexCoord[0].xy);
	vec2 LightVal=vec2(0.0,0.0);
	vec4 DiffuseColor=vec4(0.0,0.0,0.0,0.0);
	vec4 SpecularColor=vec4(0.0,0.0,0.0,0.0);
	for(int i=0;i<LightNums.x;i++)
	{
	}
	//OmniLightVal = OmniLight (gl_LightSource[2].position);
	LightVal = SpotLight(gl_LightSource[2].position,gl_LightSource[2].spotDirection,gl_LightSource[2].spotCosCutoff,gl_LightSource[2].spotExponent);
	DiffuseColor = LightVal.x * gl_FrontLightProduct[2].diffuse ;
	SpecularColor = LightVal.y * gl_FrontLightProduct[2].specular ;
	gl_FragColor = DiffuseTexColor * (gl_FrontLightProduct[2].ambient + gl_FrontLightModelProduct.sceneColor + DiffuseColor) ;
	gl_FragColor.w=DiffuseTexColor.w;
	gl_FragColor=gl_FragColor+ SpecularColor;
	
	//gl_FragColor.xyz=Normal;
	//gl_FragColor = DiffuseTexColor;
    return;
} 
