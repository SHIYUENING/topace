//Fragment Shader

// Note how the fragment struct was simply copied from our vertex shader code.
// This is necessary if we want to use a vertex and pixel shader together.

struct fragment
{
    float4 position	:	POSITION;
    float4 color0	:	COLOR0;
    float2 texcoord0	:	TEXCOORD0;
    float3 normal	:	TEXCOORD1;
    float4 objectPos	:	TEXCOORD2;
    float2 texcoord3	:	TEXCOORD3;
	float4 objectPos2	:	TEXCOORD4;
};

struct pixel
{
    float4 color : COLOR;
};

pixel main( 
    fragment IN, 
    uniform float3	globalAmbient,
    uniform float3	paraLightColor,
    uniform float3	paraLightDirection,
    uniform float3	eyePosition,
//    uniform float3	Ke,
//    uniform float3	Ka,
//    uniform float3	Kd,
//    uniform float3	Ks,

//	uniform float	testnum,
//    uniform float	shininess,
    uniform sampler2D	testTexture,
    uniform sampler2D	ShadowMapTexture,
	uniform samplerCUBE	AmbientReflectiveTexture,
	uniform sampler2D	NormalMapTexture
)
{
    float3 P = IN.position.xyz;
    float3 N = normalize(IN.normal);

    float3 L = normalize(paraLightDirection-P);
    float diffuseLight = max(dot(N, L), 0);
    float3 diffuse = paraLightColor * diffuseLight;

    float3 V = normalize(eyePosition - P);
    float3 H = normalize(L + V);
    float specularLight = pow(max(dot(N, H), 0), 100.0);

    if(diffuseLight<=0) specularLight=0;
    float4 Ocolor;
    Ocolor.xyz = globalAmbient + diffuse+specularLight;
    Ocolor.w = 1.0;
    pixel OUT;
	float4 colorposZ=tex2D( ShadowMapTexture, IN.texcoord3 );
	float posz=colorposZ.r*255.0+colorposZ.g+colorposZ.b/255.0+0.70;
	if(IN.objectPos2.z>posz) Ocolor.xyz=globalAmbient;

	half3 I = IN.objectPos2.xyz - eyePosition;
	half3 R = reflect(I, N);

	OUT.color = tex2D( NormalMapTexture, IN.texcoord0 )*Ocolor+texCUBE( AmbientReflectiveTexture, R)*0.2;

    return OUT;
}
